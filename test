curl --header "PRIVATE-TOKEN: YOUR_TOKEN" -O "THE_LINK_YOU_GOT"






import requests
import os

# === Configuration ===
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab server URL if it's self-hosted
PROJECT_ID = "12345678"            # Replace with your GitLab project ID
FILE_PATH = "docs/example.md"      # Path to the file inside the repo
REF = "main"                       # Branch name or commit hash
ACCESS_TOKEN = "your_personal_access_token"

# Output file name
OUTPUT_FILE = os.path.basename(FILE_PATH)

# === GitLab API endpoint ===
API_URL = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/files/{requests.utils.quote(FILE_PATH, safe='')}/raw?ref={REF}"

# === Send request ===
headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}
response = requests.get(API_URL, headers=headers)

if response.status_code == 200:
    with open(OUTPUT_FILE, "wb") as f:
        f.write(response.content)
    print(f"✅ File downloaded successfully: {OUTPUT_FILE}")
else:
    print(f"❌ Failed to download file. Status: {response.status_code}")
    print(response.text)








import psycopg2

# 接続情報（自分の環境に合わせて修正）
host = "localhost"
port = 5432
dbname = "your_database"
user = "your_username"
password = "your_password"
schema_name = "public"
table_name = "postal_grade_data"

try:
    # PostgreSQL に接続
    conn = psycopg2.connect(
        host=host,
        port=port,
        dbname=dbname,
        user=user,
        password=password
    )
    cursor = conn.cursor()

    # 1. 行数（レコード数）を取得
    count_sql = f"SELECT COUNT(*) FROM {schema_name}.{table_name};"
    cursor.execute(count_sql)
    row_count = cursor.fetchone()[0]
    print(f"レコード件数：{row_count} 件")

    # 2. テーブルサイズを取得（人間が読める形式）
    size_sql = f"""
        SELECT
            pg_size_pretty(pg_total_relation_size('{schema_name}.{table_name}')) AS total_size,
            pg_size_pretty(pg_relation_size('{schema_name}.{table_name}')) AS table_size,
            pg_size_pretty(pg_indexes_size('{schema_name}.{table_name}')) AS index_size;
    """
    cursor.execute(size_sql)
    size_result = cursor.fetchone()

    print(f"合計サイズ      ：{size_result[0]}")
    print(f"テーブル本体    ：{size_result[1]}")
    print(f"インデックス部分：{size_result[2]}")

except Exception as e:
    print("エラーが発生しました：", e)

finally:
    if 'conn' in locals() and conn:
        cursor.close()
        conn.close()
        print("データベース接続を終了しました。")



import pandas as pd
import psycopg2

conn = psycopg2.connect(
    dbname="你的数据库名",
    user="你的用户名",
    password="你的密码",
    host="你的数据库地址",
    port="5432"
)

df = pd.read_sql("SELECT * FROM coooo.aaatable;", conn)
print(df.head())

conn.close()





import psycopg2

# 替换为你的数据库信息
conn = psycopg2.connect(
    dbname="你的数据库名",
    user="你的用户名",
    password="你的密码",
    host="你的数据库地址",  # 如果是本机可以写 localhost
    port="5432"  # PostgreSQL 默认端口
)

# 创建游标
cur = conn.cursor()

# 执行 SQL 查询
cur.execute("SELECT * FROM your_table_name;")

# 获取所有结果
rows = cur.fetchall()

# 打印结果
for row in rows:
    print(row)

# 关闭连接
cur.close()
conn.close()







import pandas as pd
from boxsdk import JWTAuth, Client
import io

# Step 1: 你的 DataFrame
df = pd.DataFrame({
    'Name': ['Alice', 'Bob'],
    'Age': [25, 30]
})

# Step 2: 认证 Box API（用 JWT 配置）
auth = JWTAuth.from_settings_file('your_jwt_config.json')
client = Client(auth)

# Step 3: 创建 Excel 文件到内存中
excel_buffer = io.BytesIO()
df.to_excel(excel_buffer, index=False, engine='openpyxl')
excel_buffer.seek(0)

# Step 4: 选择 Box 中的目标文件夹（如根目录）
folder_id = '0'  # 根目录；你也可以用其他具体文件夹的 ID

# Step 5: 上传为文件
file_name = 'output.xlsx'
uploaded_file = client.folder(folder_id).upload_stream(excel_buffer, file_name)

print(f"文件已上传到 Box：{uploaded_file.name} (ID: {uploaded_file.id})")





import subprocess
import base64

# Tableau Server 信息
TABLEAU_SERVER = "https://your-tableau-server.com"
USERNAME = "your_username"
PASSWORD = "your_password"
VIEW_URL = "views/your_dashboard"  # 你的仪表板视图路径
OUTPUT_FILE = "dashboard.png"

# 使用 tabcmd 登录 Tableau Server
login_command = [
    "tabcmd", "login",
    "--server", TABLEAU_SERVER,
    "--username", USERNAME,
    "--password", PASSWORD
]

# 运行登录命令
subprocess.run(login_command, check=True)

# 使用 tabcmd 获取仪表板的图片
get_image_command = [
    "tabcmd", "get",
    f"{TABLEAU_SERVER}/{VIEW_URL}.png",
    "-o", OUTPUT_FILE
]

# 运行下载命令
subprocess.run(get_image_command, check=True)

# 读取图片并转换为 Base64 编码字符串
with open(OUTPUT_FILE, "rb") as img_file:
    image_base64 = base64.b64encode(img_file.read()).decode('utf-8')

print(f"仪表板图片的 Base64 编码字符串为：{image_base64}")

# 使用 tabcmd 退出登录
logout_command = ["tabcmd", "logout"]
subprocess.run(logout_command, check=True)
