
import openpyxl

def clear_rows_from_fifth(path, sheet_name="aaasheet"):
    # 打开 Excel 文件
    wb = openpyxl.load_workbook(path)
    
    # 选择指定的工作表
    if sheet_name not in wb.sheetnames:
        print(f"工作表 {sheet_name} 不存在")
        return
    
    ws = wb[sheet_name]
    
    # 遍历第5行到最后一行，清空内容
    for row in ws.iter_rows(min_row=5, max_row=ws.max_row):
        for cell in row:
            cell.value = None
    
    # 保存修改
    wb.save(path)
    print(f"文件 {path} 中 {sheet_name} 的第5行及之后的内容已清空")

# 示例调用
# clear_rows_from_fifth("你的excel文件路径.xlsx")





try:
    move_file(file_c, folder_d)
except Exception as e:
    print("[Error in move_file]:", e)

try:
    move_folder(src_folder, dst_folder)
except Exception as e:
    print("[Error in move_folder]:", e)




import shutil
from pathlib import Path
from datetime import datetime, timedelta

# ========= 日付取得 =========
def get_last_thursday():
    """先週の木曜日の日付 (yyyymmdd) を返す"""
    today = datetime.today()
    # weekday(): 月=0, 火=1, ..., 日=6 / 木=3
    days_since_thu = (today.weekday() - 3) % 7
    last_thu = today - timedelta(days=days_since_thu + 7)
    return last_thu.strftime("%Y%m%d")

# ========= ファイル移動（2引数だけ） =========
def move_file(file_path, dst_folder):
    """file_path を dst_folder へ移動する（dst_folder が無ければ作成）"""
    file_path = Path(file_path)
    dst_folder = Path(dst_folder)

    if not file_path.is_file():
        raise FileNotFoundError(f"ファイルが見つかりません: {file_path}")

    dst_folder.mkdir(parents=True, exist_ok=True)  # 目的フォルダを用意
    shutil.move(str(file_path), str(dst_folder))
    print(f"[OK] {file_path} → {dst_folder}")

# ========= フォルダ移動（2引数だけ） =========
def move_folder(src_folder, dst_folder):
    """
    src_folder を dst_folder へ移動する。
    - もし dst_folder が既に存在する場合は、src_folder をその“中”へ移動（例: B/20250814）
    - まだ無い場合は dst_folder を新規作成して移動
    """
    src_folder = Path(src_folder)
    dst_folder = Path(dst_folder)

    if not src_folder.exists():
        raise FileNotFoundError(f"フォルダが見つかりません: {src_folder}")

    # dst_folder が既に存在するなら、その中に src の名前で移動する
    if dst_folder.exists():
        final_dst = dst_folder / src_folder.name
    else:
        # 存在しないなら、親だけ用意してからその場所へ移動
        dst_folder.parent.mkdir(parents=True, exist_ok=True)
        final_dst = dst_folder

    # 最終行き先が既に存在していたら衝突なのでエラー
    if final_dst.exists():
        raise FileExistsError(f"移動先が既に存在します: {final_dst}")

    shutil.move(str(src_folder), str(final_dst))
    print(f"[OK] {src_folder} → {final_dst}")

# ========= 変数定義（長いパスは全部ここで） =========
base_dir   = Path(r"Z:\box\ab")         # ベースフォルダ（長いならここで一発で管理）
date_str   = get_last_thursday()        # 先週木曜 yyyymmdd

# ファイル: cYYYYMMDD.txt → d フォルダ
file_c     = base_dir / f"c{date_str}.txt"
folder_d   = base_dir / "d"

# フォルダ: YYYYMMDD → B（B が存在するなら B\YYYYMMDD に入れる）
src_folder = base_dir / date_str
dst_folder = base_dir / "B"

# ========= 実行例 =========
move_file(file_c, folder_d)         # 例: Z:\box\ab\c20250814.txt → Z:\box\ab\d
move_folder(src_folder, dst_folder) # 例: Z:\box\ab\20250814   → Z:\box\ab\B\20250814

import shutil
from pathlib import Path
from datetime import datetime, timedelta

# ========= 日付取得 =========
def get_last_thursday():
    """先週の木曜日の日付 (yyyymmdd) を返す"""
    today = datetime.today()
    # weekday(): 月=0, 火=1, ..., 日=6 / 木=3
    days_since_thu = (today.weekday() - 3) % 7
    last_thu = today - timedelta(days=days_since_thu + 7)
    return last_thu.strftime("%Y%m%d")

# ========= ファイル移動（2引数だけ） =========
def move_file(file_path, dst_folder):
    """file_path を dst_folder へ移動する（dst_folder が無ければ作成）"""
    file_path = Path(file_path)
    dst_folder = Path(dst_folder)

    if not file_path.is_file():
        raise FileNotFoundError(f"ファイルが見つかりません: {file_path}")

    dst_folder.mkdir(parents=True, exist_ok=True)  # 目的フォルダを用意
    shutil.move(str(file_path), str(dst_folder))
    print(f"[OK] {file_path} → {dst_folder}")

# ========= フォルダ移動（2引数だけ） =========
def move_folder(src_folder, dst_folder):
    """
    src_folder を dst_folder へ移動する。
    - もし dst_folder が既に存在する場合は、src_folder をその“中”へ移動（例: B/20250814）
    - まだ無い場合は dst_folder を新規作成して移動
    """
    src_folder = Path(src_folder)
    dst_folder = Path(dst_folder)

    if not src_folder.exists():
        raise FileNotFoundError(f"フォルダが見つかりません: {src_folder}")

    # dst_folder が既に存在するなら、その中に src の名前で移動する
    if dst_folder.exists():
        final_dst = dst_folder / src_folder.name
    else:
        # 存在しないなら、親だけ用意してからその場所へ移動
        dst_folder.parent.mkdir(parents=True, exist_ok=True)
        final_dst = dst_folder

    # 最終行き先が既に存在していたら衝突なのでエラー
    if final_dst.exists():
        raise FileExistsError(f"移動先が既に存在します: {final_dst}")

    shutil.move(str(src_folder), str(final_dst))
    print(f"[OK] {src_folder} → {final_dst}")

# ========= 変数定義（長いパスは全部ここで） =========
base_dir   = Path(r"Z:\box\ab")         # ベースフォルダ（長いならここで一発で管理）
date_str   = get_last_thursday()        # 先週木曜 yyyymmdd

# ファイル: cYYYYMMDD.txt → d フォルダ
file_c     = base_dir / f"c{date_str}.txt"
folder_d   = base_dir / "d"

# フォルダ: YYYYMMDD → B（B が存在するなら B\YYYYMMDD に入れる）
src_folder = base_dir / date_str
dst_folder = base_dir / "B"

# ========= 実行例 =========
move_file(file_c, folder_d)         # 例: Z:\box\ab\c20250814.txt → Z:\box\ab\d
move_folder(src_folder, dst_folder) # 例: Z:\box\ab\20250814   → Z:\box\ab\B\20250814




import shutil
import os
from datetime import datetime, timedelta

# ========= 日付取得 =========
def get_last_thursday():
    """先週の木曜日の日付 (yyyymmdd) を返す"""
    today = datetime.today()
    days_since_thursday = (today.weekday() - 3) % 7  # 3は木曜
    last_thursday = today - timedelta(days=days_since_thursday + 7)
    return last_thursday.strftime("%Y%m%d")

# ========= ファイル移動 =========
def move_file(file_path, dst_folder):
    """ファイルを移動する"""
    if not os.path.isfile(file_path):
        raise FileNotFoundError(f"ファイルが存在しません: {file_path}")
    if not os.path.exists(dst_folder):
        os.makedirs(dst_folder)
    shutil.move(file_path, dst_folder)
    print(f"[OK] {file_path} → {dst_folder}")

# ========= フォルダ移動 =========
def move_folder(src_folder, dst_folder):
    """フォルダを移動する"""
    if not os.path.exists(src_folder):
        raise FileNotFoundError(f"フォルダが存在しません: {src_folder}")
    if os.path.exists(dst_folder):
        raise FileExistsError(f"目的フォルダが既に存在します: {dst_folder}")
    shutil.move(src_folder, dst_folder)
    print(f"[OK] {src_folder} → {dst_folder}")

# ========= 変数定義 =========
base_dir   = r"Z:\box\ab"           # ベースフォルダ
date_str   = get_last_thursday()    # 先週木曜の日付

file_c     = os.path.join(base_dir, f"c{date_str}.txt")  # cYYYYMMDD.txt
folder_d   = os.path.join(base_dir, "d")                 # d フォルダ

src_folder = os.path.join(base_dir, date_str)            # YYYYMMDD フォルダ
dst_folder = os.path.join(base_dir, "B")                 # B フォルダ

# ========= 実行 =========
move_file(file_c, folder_d)       # ファイル移動
move_folder(src_folder, dst_folder)  # フォルダ移動








import shutil
import os

def move_folder(src: str, dst: str):
    """
    移动文件夹从 src 到 dst。
    """
    if not os.path.exists(src):
        raise FileNotFoundError(f"源文件夹不存在: {src}")

    if os.path.exists(dst):
        raise FileExistsError(f"目标文件夹已存在: {dst}")

    shutil.move(src, dst)
    print(f"已成功移动 {src} 到 {dst}")


# 用变量存放路径
src_path = r"Z:\box\ab\A"
dst_path = r"Z:\box\ab\B"

# 调用方法
move_folder(src_path, dst_path)







# 開いていた場合は閉じる
for wb in excel.Workbooks:
    if wb.Name.lower() == "merged_all.xlsx":
        wb.Close(False)

# 少し待つ（ファイルハンドル解放のため）
time.sleep(1)

# 保存
wb_dst.SaveAs(dst_path)




try:
    wb_dst.Sheets(wb_dst.Sheets.Count).Name = original_name
except Exception as e:
    print(f"⚠️ シート名 \"{original_name}\" を設定できません: {e}")
import win32com.client as win32
import os

# === ソースファイルの設定 ===
source_folder = "sources"  # Excelファイルを入れるフォルダ
file_names = ["aaa.xlsx", "bbb.xlsx", "ccc.xlsx"]  # 各ファイルに1つのシートのみ（シート名＝ファイル名）

# === 出力ファイルのパス ===
dst_path = os.path.abspath(os.path.join(source_folder, "merged_all.xlsx"))

# ✅ 出力ファイルがすでに存在する場合は削除（上書き確認を回避）
if os.path.exists(dst_path):
    os.remove(dst_path)

# ✅ Excelアプリケーションを起動
excel = win32.gencache.EnsureDispatch("Excel.Application")
excel.Visible = True               # 🪟 Excelウィンドウを表示（デバッグ用）
excel.DisplayAlerts = False        # ⚠️ 上書き確認などのダイアログを非表示

# ✅ 空のExcelブックを新規作成し、一度保存（保存しないとシートのコピーができない）
wb_dst = excel.Workbooks.Add()
wb_dst.SaveAs(dst_path)

# ✅ 各ソースファイルのシートを順番にコピー
for file_name in file_names:
    src_path = os.path.abspath(os.path.join(source_folder, file_name))
    print(f"📥 コピー中: {file_name}")

    # 元ファイルを開く
    wb_src = excel.Workbooks.Open(src_path)
    sheet = wb_src.Sheets(1)  # 最初のシートを取得（1つしかない想定）
    original_name = sheet.Name  # 元のシート名を保持

    # シートを出力ファイルの最後にコピー
    sheet.Copy(After=wb_dst.Sheets(wb_dst.Sheets.Count))

    # コピーされたシート（最後尾）に元のシート名をつける
    try:
        wb_dst.Sheets(wb_dst.Sheets.Count).Name = original_name
    except Exception:
        print(f"⚠️ シート名 \"{original_name}\" は無効な文字を含むか長すぎます")

    # 元ファイルを保存せずに閉じる
    wb_src.Close(False)

# ✅ 出力ファイルを保存して閉じる
wb_dst.Save()
wb_dst.Close()
excel.Quit()

print(f"✅ 結合完了：保存先 → {dst_path}")







import win32com.client as win32
import os

# === パスの設定 ===
source_folder = "sources"
src_path = os.path.abspath(os.path.join(source_folder, "sample.xlsx"))       # コピー元のExcelファイル
dst_path = os.path.abspath(os.path.join(source_folder, "merged_test.xlsx"))  # 出力先のExcelファイル

# ✅ 既に出力先ファイルが存在する場合、上書き確認を避けるため削除する
if os.path.exists(dst_path):
    os.remove(dst_path)

# ✅ Excelアプリケーションを起動
excel = win32.gencache.EnsureDispatch("Excel.Application")
excel.Visible = True               # ✅ Excelウィンドウを表示（デバッグ用）
excel.DisplayAlerts = False        # ✅ 上書き保存などの警告メッセージを表示しない

# ✅ コピー元のExcelファイルを開く
wb_src = excel.Workbooks.Open(src_path)
sheet = wb_src.Sheets(1)           # ✅ 最初のシートを取得

# ✅ 新しい空白のExcelブックを作成し、出力先として保存
wb_dst = excel.Workbooks.Add()
wb_dst.SaveAs(dst_path)            # ✅ 事前に保存しておかないとシートコピーが動作しない

# ✅ シートをコピー（出力ファイルの最後に追加）
sheet.Copy(After=wb_dst.Sheets(wb_dst.Sheets.Count))

# ✅ コピー元のファイルを保存せずに閉じる
wb_src.Close(False)

# ✅ 出力ファイルを保存して閉じる
wb_dst.Save()
wb_dst.Close()

# ✅ Excelアプリケーションを終了
excel.Quit()

print("✅ シートのコピー完了！保存先：", dst_path)


import os
import win32com.client as win32
from glob import glob

# === 設定 ===
source_folder = "sources"  # Excelファイルを入れておくフォルダ
output_file = "merged_final.xlsx"
output_path = os.path.abspath(os.path.join(source_folder, output_file))

# === 既にファイルが存在する場合は削除 ===
if os.path.exists(output_path):
    os.remove(output_path)

# === マージ対象のExcelファイルを取得 ===
excel_files = [
    f for f in glob(os.path.join(source_folder, "*.xlsx"))
    if not f.endswith(output_file) and not os.path.basename(f).startswith("~$")
]

# === Excelアプリケーションを起動 ===
excel = win32.gencache.EnsureDispatch("Excel.Application")
excel.DisplayAlerts = False        # 🔕 警告メッセージを表示しない
excel.Visible = False              # 🪟 非表示で実行

# === 空のExcelファイルを作成して保存（保存しないとCopyできない） ===
wb_target = excel.Workbooks.Add()
wb_target.SaveAs(output_path)

print(f"📁 統合ファイルを作成：{output_path}")

# === 各Excelファイルの最初のシートをコピー ===
for file_path in excel_files:
    abs_path = os.path.abspath(file_path)
    file_name = os.path.splitext(os.path.basename(file_path))[0]

    print(f"📥 コピー中: {file_name}")

    wb_source = excel.Workbooks.Open(abs_path)
    sheet_to_copy = wb_source.Sheets(1)  # 最初のシートを取得
    sheet_to_copy.Copy(After=wb_target.Sheets(wb_target.Sheets.Count))  # 最後にコピー
    wb_source.Close(False)

    # コピーされたシートをリネーム
    try:
        wb_target.Sheets(wb_target.Sheets.Count).Name = file_name[:31]
    except Exception:
        print(f"⚠️ シート名 \"{file_name}\" は無効な文字を含む可能性があります。")

# === 空白シートがまだ残っていれば削除 ===
if wb_target.Sheets.Count > len(excel_files):
    try:
        for sheet in wb_target.Sheets:
            if sheet.UsedRange.Count == 1 and not sheet.UsedRange.Value:
                sheet.Delete()
    except:
        pass  # 削除に失敗しても無視

# === 保存して終了 ===
wb_target.Save()
wb_target.Close()
excel.Quit()

print(f"\n✅ 完了：すべてのシートを統合し保存しました → {output_path}")





import win32com.client as win32
import os

excel = win32.gencache.EnsureDispatch("Excel.Application")
excel.Visible = True  # 这次让它可见，方便调试

# 修改成你实际的文件路径
src_path = os.path.abspath("sources/sample.xlsx")
dst_path = os.path.abspath("sources/merged_test.xlsx")

# 打开源文件
wb_src = excel.Workbooks.Open(src_path)
sheet = wb_src.Sheets(1)

# 新建空白目标文件
wb_dst = excel.Workbooks.Add()
wb_dst.SaveAs(dst_path)

# 复制 sheet 到目标文件中
sheet.Copy(After=wb_dst.Sheets(wb_dst.Sheets.Count))

# 关闭并保存
wb_src.Close(False)
wb_dst.Save()
wb_dst.Close()
excel.Quit()

print("✅ 测试完成")





import os
import win32com.client as win32
from glob import glob

# === 設定 ===
source_folder = "sources"  # 統合したいExcelファイルを保存するフォルダ
output_file = "merged_final.xlsx"  # 出力ファイル名
output_path = os.path.abspath(os.path.join(source_folder, output_file))  # 出力パス

# === マージ対象のExcelファイルをすべて取得 ===
excel_files = [
    f for f in glob(os.path.join(source_folder, "*.xlsx"))
    if not f.endswith(output_file) and not os.path.basename(f).startswith("~$")
]

# === Excelアプリケーションを起動 ===
excel = win32.gencache.EnsureDispatch("Excel.Application")
excel.DisplayAlerts = False  # 上書き確認ダイアログを非表示
excel.Visible = False        # Excelウィンドウを表示しない

# === 新しい空のExcelファイルを作成（先に保存が必要）===
wb_target = excel.Workbooks.Add()
wb_target.SaveAs(output_path)

print(f"📁 空のマージファイルを作成しました：{output_path}")

# === 各ファイルの最初のシートをコピー開始 ===
for file_path in excel_files:
    abs_path = os.path.abspath(file_path)
    file_name = os.path.splitext(os.path.basename(file_path))[0]  # 拡張子なしファイル名

    print(f"📥 コピー中: {file_name} ...")

    wb_source = excel.Workbooks.Open(abs_path)  # 元ファイルを開く
    sheet_to_copy = wb_source.Sheets(1)         # 最初のシートを取得
    sheet_to_copy.Copy(Before=wb_target.Sheets(1))  # 新しいブックの先頭にコピー
    wb_source.Close(False)  # 元ファイルを保存せずに閉じる

    # コピーされたシートをファイル名でリネーム（最大31文字まで）
    try:
        wb_target.Sheets(1).Name = file_name[:31]
    except Exception:
        print(f"⚠️ シート名 \"{file_name}\" は不正な文字が含まれる可能性があります。リネーム失敗")

# === デフォルトの空白シートを削除（もし存在すれば）===
if wb_target.Sheets.Count > len(excel_files):
    try:
        for sheet in wb_target.Sheets:
            if sheet.UsedRange.Count == 1 and not sheet.UsedRange.Value:
                sheet.Delete()
    except:
        pass  # 削除に失敗しても無視

# === 保存してExcelを終了 ===
wb_target.Save()
wb_target.Close()
excel.Quit()

print(f"\n✅ 統合完了！出力ファイル：{output_path}")




import os
import pandas as pd
from openpyxl import Workbook, load_workbook

# === 1. 配置路径 ===
source_file = "source.xlsx"           # 源文件路径
source_sheet = "SheetA"               # 源 sheet 名

folder_path = "folderA"               # 要创建的文件夹
target_file_name = "target.xlsx"      # 目标文件名
target_sheet_name = "com"             # 要写入的目标 sheet 名

# === 2. 创建目标文件夹和空 Excel 文件 ===
os.makedirs(folder_path, exist_ok=True)
target_file_path = os.path.join(folder_path, target_file_name)

if not os.path.exists(target_file_path):
    wb = Workbook()
    wb.save(target_file_path)
    print(f"📁 已创建空白 Excel 文件：{target_file_path}")
else:
    print(f"📁 文件已存在，将在其上添加 sheet：{target_file_path}")

# === 3. 读取源文件的 SheetA 数据（只数据不格式） ===
df = pd.read_excel(source_file, sheet_name=source_sheet)

# === 4. 打开目标 Excel 并写入新的 sheet "com" ===
book = load_workbook(target_file_path)
with pd.ExcelWriter(target_file_path, engine='openpyxl', mode='a') as writer:
    writer.book = book

    # 如果已存在同名 sheet，先删除它
    if target_sheet_name in book.sheetnames:
        del book[target_sheet_name]
    
    df.to_excel(writer, sheet_name=target_sheet_name, index=False)

print(f"✅ 成功将 `{source_sheet}` 的内容复制为 `{target_sheet_name}` 写入 `{target_file_path}`")





import requests
import urllib.parse
import os

# === 配置 ===
project_id = 20
branch_name = "demo/table"
file_path = "port/table/docs/ccc.md"  # GitLab 中的完整路径
token = "你的TOKEN"
base_url = "https://aaa-aaa-viewer.rmb-ccc.jp"

# 你要保存的目标目录（确保存在或可写）
save_dir = "D:/GitLabDownloads/"

# URL 转义
encoded_branch = urllib.parse.quote(branch_name, safe='')
encoded_path = urllib.parse.quote(file_path, safe='')

# 拼 API URL
api_url = f"{base_url}/api/v4/projects/{project_id}/repository/files/{encoded_path}/raw?ref={encoded_branch}"
headers = {"PRIVATE-TOKEN": token}

print(f"🔗 下载链接: {api_url}")

# 请求下载
resp = requests.get(api_url, headers=headers)

if resp.status_code == 200:
    # 只取最后文件名
    filename = os.path.basename(file_path)
    local_path = os.path.join(save_dir, filename)

    # 保存
    with open(local_path, "wb") as f:
        f.write(resp.content)
    print(f"✅ 下载完成: {local_path}")
else:
    print(f"❌ 下载失败: {resp.status_code}")
    print(resp.text)

import requests
import urllib.parse

# ============ 你的参数 ============
project_id = 20
branch_name = "demo/table"  # 这个分支名有 '/', API 需要 URL Encode
file_path = "port/table/xxx/yyy/target.md"  # 这里换成你最终确定的路径
token = "你的TOKEN"
base_url = "https://aaa-aaa-viewer.rmb-ccc.jp"

# ============ 自动 URL 转义 ============
encoded_branch = urllib.parse.quote(branch_name, safe='')
encoded_path = urllib.parse.quote(file_path, safe='')

# API URL
api_url = f"{base_url}/api/v4/projects/{project_id}/repository/files/{encoded_path}/raw?ref={encoded_branch}"
headers = {"PRIVATE-TOKEN": token}

print(f"🔗 下载链接: {api_url}")

# 请求下载
resp = requests.get(api_url, headers=headers)

if resp.status_code == 200:
    # 保存文件
    local_filename = file_path.split("/")[-1]  # 自动取最后的文件名
    with open(local_filename, "wb") as f:
        f.write(resp.content)
    print(f"✅ 下载完成: {local_filename}")
else:
    print(f"❌ 下载失败: {resp.status_code}")
    print(resp.text)



import requests

# === GitLab 配置 ===
GITLAB_URL = "https://aaa-aaa-viewer.rmb-ccc.jp"
PROJECT_ID = 20
ACCESS_TOKEN = "你的TOKEN"

# 只列出分支名里包含这个前缀的
BRANCH_PREFIX = "demo/table"

headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}

def get_branches():
    """列出项目的所有分支，并过滤 demo/table 前缀"""
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/branches"
    resp = requests.get(url, headers=headers)
    if resp.status_code == 200:
        branches = resp.json()
        filtered = [b["name"] for b in branches if b["name"].startswith(BRANCH_PREFIX)]
        print(f"✅ 找到 {len(filtered)} 个分支，前缀是 `{BRANCH_PREFIX}`:\n")
        for name in filtered:
            print(f"- {name}")
    else:
        print(f"❌ 获取分支失败 {resp.status_code}")
        print(resp.text)

if __name__ == "__main__":
    get_branches()



import requests

# === GitLab 配置 ===
GITLAB_URL = "https://aaa-aaa-viewer.rmb-ccc.jp"
PROJECT_ID = 59
ACCESS_TOKEN = "你的TOKEN"

TARGET_KEYWORD = "demon"   # 只找包含 demon 的路径

headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}

def get_branches():
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/branches"
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return [b["name"] for b in resp.json()]

def list_files(ref):
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/tree"
    params = {"ref": ref, "recursive": True, "per_page": 100}
    resp = requests.get(url, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()

def scan_demon_files():
    branches = get_branches()
    print(f"✅ 发现 {len(branches)} 个分支，开始扫描包含 `{TARGET_KEYWORD}` 的文件...\n")

    found_files = []

    for branch in branches:
        print(f"🔍 正在扫描分支: {branch}")
        try:
            files = list_files(branch)
            for f in files:
                if f["type"] == "blob" and TARGET_KEYWORD in f["path"]:
                    found_files.append((branch, f["path"]))
        except Exception as e:
            print(f"⚠️ 分支 {branch} 无法读取: {e}")

    if found_files:
        print("\n✅ 找到以下匹配结果：\n")
        for branch, path in found_files:
            print(f"📌 分支: {branch} | 路径: {path}")
    else:
        print("\n❌ 没有任何路径包含 `demon`")

if __name__ == "__main__":
    scan_demon_files()







import requests

# === 你的 GitLab 配置 ===
GITLAB_URL = "https://aaa-aaa-viewer.rmb-ccc.jp"
PROJECT_ID = 59  # 先用 59，如果之后确定是其他 ID 再换
ACCESS_TOKEN = "你的TOKEN"

headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}

def get_branches():
    """获取所有分支名"""
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/branches"
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return [b["name"] for b in resp.json()]

def list_files(ref):
    """列出某分支下的所有文件（递归）"""
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/tree"
    params = {"ref": ref, "recursive": True, "per_page": 100}
    resp = requests.get(url, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()

def scan_all_md_files():
    branches = get_branches()
    print(f"✅ 发现 {len(branches)} 个分支，开始扫描所有 .md 文件...\n")

    found_files = []

    for branch in branches:
        print(f"🔍 正在扫描分支: {branch}")
        try:
            files = list_files(branch)
            for f in files:
                if f["type"] == "blob" and f["path"].endswith(".md"):
                    found_files.append((branch, f["path"]))
        except Exception as e:
            print(f"⚠️ 分支 {branch} 无法读取: {e}")

    if found_files:
        print("\n✅ 找到以下 .md 文件：\n")
        for branch, path in found_files:
            print(f"📌 分支: {branch} | 路径: {path}")
    else:
        print("\n❌ 所有分支都没找到任何 .md 文件")

if __name__ == "__main__":
    scan_all_md_files()

import requests

# === 配置 ===
GITLAB_URL = "https://aaa-aaa-viewer.rmb-ccc.jp"
PROJECT_ID = 59
ACCESS_TOKEN = "你的TOKEN"
SEARCH_FILE = "ccc.md"   # 你要找的文件名

headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}

def get_branches():
    """获取所有分支"""
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/branches"
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return [b["name"] for b in resp.json()]

def list_files(ref):
    """列出某个分支的所有文件（递归）"""
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/tree"
    params = {"ref": ref, "recursive": True, "per_page": 100}
    resp = requests.get(url, headers=headers, params=params)
    resp.raise_for_status()
    return resp.json()

def search_file_in_all_branches():
    branches = get_branches()
    print(f"✅ 找到 {len(branches)} 个分支，开始搜索 `{SEARCH_FILE}` ...\n")

    found_results = []

    for branch in branches:
        print(f"🔍 正在检查分支: {branch} ...")
        try:
            files = list_files(branch)
            for f in files:
                if f["type"] == "blob" and f["path"].endswith(SEARCH_FILE):
                    found_results.append((branch, f["path"]))
        except Exception as e:
            print(f"⚠️ 无法读取分支 {branch}: {e}")

    if found_results:
        print("\n✅ 找到以下匹配结果：\n")
        for branch, path in found_results:
            print(f"📌 分支: {branch}  | 路径: {path}")
    else:
        print("\n❌ 在所有分支中都没有找到 `ccc.md`")

if __name__ == "__main__":
    search_file_in_all_branches()




import requests
import json

# === 你的配置 ===
GITLAB_URL = "https://aaa-aaa-viewer.rmb-ccc.jp"
PROJECT_ID = 59
ACCESS_TOKEN = "你的TOKEN"

def list_branches():
    api_url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/branches"
    headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}

    resp = requests.get(api_url, headers=headers)
    if resp.status_code == 200:
        branches = resp.json()
        print(f"✅ 这个项目共有 {len(branches)} 个分支:\n")
        for b in branches:
            name = b["name"]
            default = "⭐ 默认分支" if b.get("default") else ""
            commit_id = b["commit"]["short_id"]
            print(f"- {name:30} (commit {commit_id}) {default}")
    else:
        print(f"❌ 获取分支失败: {resp.status_code}")
        print(resp.text)

if __name__ == "__main__":
    list_branches()



明白了！你在 feature/202407 分支下跑

.../repository/tree?ref=feature%2F202407

结果 GitLab 返回 404 Tree Not Found，这说明：
	•	分支 feature/202407 是存在的（因为 default_branch 就是它）
	•	但是在这个分支下，根目录是空的，或者 API 请求路径不对

⸻

✅ 为什么会出现 Tree Not Found？

GitLab 在 3 种情况下会返回这个：
	1.	这个分支确实没有任何文件（极少见，但可能这个分支是空的）
	2.	这个分支对应的不是分支，而是 tag/commit，无法列 tree
	3.	项目不是标准仓库，而是镜像、子模块，根目录没内容

⸻

✅ 我们确认一下：这个分支有没有内容？

换个命令，专门看这个分支的最后一次提交信息：

curl --header "PRIVATE-TOKEN: <你的TOKEN>" ^
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/commits?ref_name=feature%2F202407&per_page=1"

✅ 如果能返回 JSON，例如：

[
  {
    "id": "abc1234...",
    "short_id": "abc1234",
    "title": "Initial commit",
    "author_name": "xxx",
    ...
  }
]

说明分支里确实有 commit → 那应该有文件，只是我们 tree 请求路径可能还不对。

❌ 如果这个也 404 → 说明 feature/202407 这个分支几乎是空的（没有任何文件）。

⸻

✅ 还有一种可能：GitLab 不是标准 repo

如果你的 GitLab 项目 不是普通代码仓库（比如它只是一个空壳、只存 CI 配置、或者是镜像项目），tree API 也会返回 404。

⸻

✅ 建议一步步排查

1️⃣ 先确认 feature/202407 分支有没有 commit

curl --header "PRIVATE-TOKEN: <你的TOKEN>" ^
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/commits?ref_name=feature%2F202407&per_page=1"

2️⃣ 如果有 commit，再继续排查 tree 为什么没内容

3️⃣ 如果连 commit 都没有 → 说明这个分支本身就是空的，没法下载文件

⸻

✅ 可能的最终结论
	•	如果 feature/202407 分支里确实没文件 → 你想要的 ccc.md 根本不在这个分支，可能在别的分支（main/master）
	•	如果 feature/202407 分支里有 commit → 我们就要进一步确认路径

⸻

👉 建议你先跑 commit 命令，看分支里到底有没有东西

要不要我帮你 组合成一个命令，一次性确认分支里是否有 commit & 文件数？




明白，用项目 ID 还是 404，那就说明还有一个环节没完全对上，我们现在一步步精确排查问题，直到找到原因。

⸻

✅ 目前我们确定的

✅ 项目 ID = 59 是对的（GitLab 已经返回 JSON）
✅ 分支名 demo 看起来没问题（从 /blob/demo/ 取到）
✅ 文件路径 aaa/bbb/ccc.md 看似正确

但是 API 还是 404 → 说明 GitLab 还是找不到文件。

⸻

✅ 404 可能剩下的两个原因
	1.	文件路径写法不对（大小写/目录结构）
	•	可能实际路径是 AAA/bbb/ccc.md 或 aaa/bbb/CCC.md
	•	或者中间还有一层 src/aaa/bbb/ccc.md
	•	GitLab 对路径大小写敏感
	2.	分支 demo 不是真实分支名
	•	可能实际是 Demo（大小写不同）
	•	可能 blob/demo 其实是一个 tag 或 commit，不是分支

⸻

✅ 下一步 → 精确确认真实路径 & 分支

我们直接用 API 列出仓库的文件树，看看真实的路径长什么样。

⸻

1️⃣ 列出项目 59 所有分支

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/branches"

✅ 你会看到类似：

[
  { "name": "main", ... },
  { "name": "demo", ... },
  ...
]

→ 这样我们确认 demo 是不是一个真实分支名，还是写错大小写。

⸻

2️⃣ 列出 demo 分支下的 aaa 目录

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/tree?ref=demo&path=aaa"

✅ 它会返回 demo 分支下 aaa 目录里的文件/子目录，比如：

[
  { "type": "tree", "name": "bbb" }
]

如果没返回，说明 aaa 这个目录本身就不存在（可能大小写错了）。

⸻

3️⃣ 继续列 bbb 目录

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/tree?ref=demo&path=aaa/bbb"

✅ 它会显示 ccc.md 是否真的存在。

⸻

✅ 如果能看到 ccc.md

那就说明真实路径是 aaa/bbb/ccc.md，下载命令才是正确的：

https://.../projects/59/repository/files/aaa%2Fbbb%2Fccc.md/raw?ref=demo

如果没看到，那就说明：
	•	路径大小写不对
	•	或者还有多一层目录
	•	或者这个文件根本不在 demo 分支

⸻

✅ 要不要我给你完整排查命令集？

我可以一次性给你 3 条命令：

1️⃣ 列出所有分支 → 确认 demo 是否真实存在
2️⃣ 列出 demo 分支下 aaa 目录 → 确认有无 bbb
3️⃣ 列出 aaa/bbb 目录 → 确认有无 ccc.md

跑完这三条命令，我们就能 100% 确定路径问题！

⸻

👉 你要不要我直接给你这 3 条命令一步步排查，找出真正的文件路径？






明白了！我们现在信息已经完整了：
	•	✅ 项目 ID：59
	•	✅ 分支名：demo（blob/ 后面那个）
	•	✅ 文件路径：aaa/bbb/ccc.md

接下来只需要把文件路径里的 / 转义成 %2F，就可以拼出最终下载 API。

⸻

✅ 转义后的文件路径

aaa/bbb/ccc.md  →  aaa%2Fbbb%2Fccc.md


⸻

✅ 最终下载 API URL

https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/files/aaa%2Fbbb%2Fccc.md/raw?ref=demo


⸻

✅ 最终 curl 命令

curl --header "PRIVATE-TOKEN: <你的TOKEN>" ^
     -O "https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/59/repository/files/aaa%2Fbbb%2Fccc.md/raw?ref=demo"

✅ 执行后就会下载到当前目录，文件名 ccc.md，里面就是 Markdown 内容，而不是 HTML 或 404。

⸻

✅ 总结你需要做的

1️⃣ 你已经有 id=59 ✅
2️⃣ 你已经知道分支是 demo ✅
3️⃣ 文件路径是 aaa/bbb/ccc.md ✅

直接跑上面这条 curl 命令就能成功。

⸻

✅ 进阶

如果以后还有别的文件，只要换 aaa/bbb/xxx.md → aaa%2Fbbb%2Fxxx.md 就行，项目 ID 59 和分支 demo 不变。

⸻

要不要我再给你一个小命令，自动把 aaa/bbb/ccc.md 这种路径转成 aaa%2Fbbb%2Fccc.md，让你以后不用手动改 %2F？

还是先直接跑上面的 curl 看能否成功下载？



明白了！我们用你描述的占位符 完整还原结构，一步一步拆分。

⸻

✅ 你给的原始 URL（占位符版）

aaa-aaa-viewer.rmb-ccc.jp/root/cccc/-/blob/demo/aaa/aaa/ccc.md

拆解后结构是：
	•	域名

aaa-aaa-viewer.rmb-ccc.jp


	•	项目路径

root/cccc


	•	分支名

demo  ← 在 blob 后面紧跟的就是分支名


	•	文件路径

aaa/aaa/ccc.md



⸻

✅ GitLab API 规则

API 下载必须变成：

https://<域名>/api/v4/projects/<URL_ENCODED_PROJECT_PATH>/repository/files/<URL_ENCODED_FILE_PATH>/raw?ref=<BRANCHNAME>

必须转义 / 为 %2F
	•	root/cccc → root%2Fcccc ✅
	•	aaa/aaa/ccc.md → aaa%2Faaa%2Fccc.md ✅

⸻

✅ 转换后的 API URL

所以它应该变成：

https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/root%2Fcccc/repository/files/aaa%2Faaa%2Fccc.md/raw?ref=demo


⸻

✅ 最终 curl 命令

curl --header "PRIVATE-TOKEN: <你的TOKEN>" ^
     -O "https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/root%2Fcccc/repository/files/aaa%2Faaa%2Fccc.md/raw?ref=demo"

✅ 这样就应该返回真正的 ccc.md 文件，而不是 404 或 HTML。

⸻

✅ 但是，有两个可能的坑
	1.	项目路径不一定真是 root/cccc
	•	可能其实是顶级项目 cccc（不要 root/）
	•	你可以试一下：

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/cccc"


	2.	分支 demo 可能不是默认分支
	•	需要确认 demo 真的存在：

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/root%2Fcccc/repository/branches"



⸻

✅ 保险做法 → 用项目 ID，避免路径猜错

可以直接列出你有权限的所有项目 ID：

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects?membership=true&per_page=100"

然后找到 cccc 的 id，用 ID 下载，100% 不会错：

https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/<ID>/repository/files/aaa%2Faaa%2Fccc.md/raw?ref=demo


⸻

✅ 你现在可以怎么试
	1.	先用路径 root/cccc 试一下：

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/root%2Fcccc"

	2.	如果 404，再试顶级项目 cccc：

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/cccc"

	3.	都不行，就列项目 ID，找到真实路径：

curl --header "PRIVATE-TOKEN: <token>" \
"https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects?membership=true&per_page=100"


⸻

✅ 要不要我帮你一次性生成
	•	用路径 root/cccc 的 curl 命令
	•	用路径 cccc 的 curl 命令
	•	用项目 ID 的 curl 模板

这样你一步步试，找到哪个项目路径才对？

👉 要不要我直接给你 三个命令一步一步排查？




curl --header "PRIVATE-TOKEN: <你的TOKEN>" ^
     -O "https://aaa-aaa-viewer.rmb-ccc.jp/api/v4/projects/root%2Fcccc/repository/files/aaa%2Faaa%2Fccc.md/raw?ref=demo"




明白了！下载之后得到 404 Not Found（你说的 Alla404NonFund 应该是 GitLab 返回的 404 Not Found 页面）。

这说明 GitLab API 请求成功了，但它找不到这个文件。

出现 404 Not Found 的原因通常只有 三种，我们逐一排查：

⸻

✅ 1. 项目路径不对（最常见）

GitLab API 里的项目路径必须是 URL Encode 之后的 namespace%2Fproject。
	•	你原始 URL 里是 root/demo-proj，必须写成 root%2Fdemo-proj
	•	如果你没转义 /，GitLab 认为你要找 root 这个项目 → 找不到 → 404

确认方法

curl --header "PRIVATE-TOKEN: <token>" \
"https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj"

✅ 如果能返回 JSON（项目详情），说明项目路径没问题
❌ 如果还是 404，说明项目路径没写对或没转义

⸻

✅ 2. 分支名不对

?ref=BRANCHNAME 里的分支名必须跟仓库里完全一致。
	•	如果仓库默认分支是 master，但你写 main → 404
	•	如果分支是 feature/demo-2025，要写 feature%2Fdemo-2025 → 404

确认方法

curl --header "PRIVATE-TOKEN: <token>" \
"https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj/repository/branches"

✅ 会列出所有分支（比如 main, master, develop）
→ 你要用跟 /blob/<这里> 一模一样的分支名

⸻

✅ 3. 文件路径不对或没转义

GitLab API 里的文件路径必须是仓库里的完整相对路径，并且 URL Encode。
	•	docs/tutorial/readme.md → docs%2Ftutorial%2Freadme.md ✅
	•	如果漏掉 tutorial 目录或大小写不一致 → 404
	•	如果不转义 / → GitLab 认为是目录 → 404

确认方法

curl --header "PRIVATE-TOKEN: <token>" \
"https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj/repository/tree?ref=main&path=docs/tutorial"

✅ 如果能看到 readme.md → 路径对
❌ 如果没有 → 路径错了

⸻

✅ 解决思路

要避免 404，必须确认这 3 个关键：
	1.	✅ 项目路径（root/demo-proj → root%2Fdemo-proj）
	2.	✅ 分支名（blob/ 后面那个名字要精确一致）
	3.	✅ 文件路径（demo/folder/file.md → demo%2Ffolder%2Ffile.md，且大小写正确）

⸻

✅ 建议你先跑 3 个排查命令

1️⃣ 确认项目路径对不对

curl --header "PRIVATE-TOKEN: <token>" \
"https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj"

2️⃣ 确认分支到底叫什么

curl --header "PRIVATE-TOKEN: <token>" \
"https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj/repository/branches"

3️⃣ 确认文件路径到底对不对

curl --header "PRIVATE-TOKEN: <token>" \
"https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj/repository/tree?ref=main&path=demo/folder"

	•	✅ 如果都能找到 → 再拼 API 下载 URL 就一定不会 404
	•	❌ 如果有一个不对 → 修正后再试

⸻

✅ 你想让我怎么帮？
	•	要不要我先给你排查命令（一步步确认项目、分支、路径），帮你找出到底哪一步错了？
	•	还是直接帮你拿原始 URL 解析出正确的项目路径、分支、文件路径，并生成最终 curl 命令？

👉 你要不要先跑第 1 步（确认项目路径），看能不能返回 JSON？







import urllib.parse, os

ACCESS_TOKEN = "glpat-你的TOKEN"

raw_url = input("请输入客户给的 /blob/ URL: ").strip()

parts = raw_url.split("/")
domain = parts[2]
proj_path = "%2F".join(parts[3:parts.index("-")])
branch = parts[parts.index("blob") + 1]
file_path = "%2F".join(parts[parts.index("blob") + 2:])
filename = raw_url.split("/")[-1]

api_url = f"https://{domain}/api/v4/projects/{proj_path}/repository/files/{file_path}/raw?ref={branch}"

print(f"✅ 转换完成: {api_url}")
os.system(f"curl --header \"PRIVATE-TOKEN: {ACCESS_TOKEN}\" -O \"{api_url}\"")




curl --header "PRIVATE-TOKEN: <你的Token>" ^
     -O "https://AABBBCCCDDDEEFF.jp/api/v4/projects/root%2Fdemo-proj/repository/files/demo%2Ftutorial%2Fguide.md/raw?ref=main"



明白了！你的公司/客户的 GitLab 域名是类似：

https://devops.xxx.jp

也就是一个日本后缀 .jp 的 内部自建 GitLab，所以我们必须用这个域名来调用 API，而不能用 https://gitlab.com。

✅ 好消息是：GitLab API 在 .jp 域名下一样能用，只要你把域名替换正确。

⸻

✅ 第一步：先验证 Token 是否对 .jp 域名有效

请在命令行里运行（把 <你的Token> 换成你的真实 token）：

curl --header "PRIVATE-TOKEN: <你的Token>" https://devops.xxx.jp/api/v4/user

可能的结果：
	•	✅ 如果返回 JSON，类似：

{"id":123,"username":"yourname","email":"xxx@company.jp"}

说明：
	•	域名正确
	•	Token 有效
	•	权限够

	•	❌ 如果返回 HTML（带 <html> <body> 登录页） →
	•	可能 Token 权限不足
	•	可能 Token 输入错
	•	也可能域名拼错

⸻

✅ 第二步：确定 GitLab API 下载文件的完整地址

假设你的 GitLab 项目是：
	•	命名空间/项目：myteam/myrepo
	•	文件路径：docs/readme.md
	•	分支名：main

那么正确的 API 下载 URL 是：

https://devops.xxx.jp/api/v4/projects/myteam%2Fmyrepo/repository/files/docs%2Freadme.md/raw?ref=main

然后你可以直接用 curl 下载：

curl --header "PRIVATE-TOKEN: <你的Token>" \
     -O "https://devops.xxx.jp/api/v4/projects/myteam%2Fmyrepo/repository/files/docs%2Freadme.md/raw?ref=main"

✅ 这样就能拿到真正的 Markdown 文件，而不会是 HTML 登录页面。

⸻

✅ 第三步：Python 脚本适配 .jp 域名

把之前的脚本里的 GITLAB_URL 改成 https://devops.xxx.jp 就行，比如：

GITLAB_URL = "https://devops.xxx.jp"   # ⚠️ 改成你们的域名
ACCESS_TOKEN = "glpat-xxxxxxxxxxxxxxxx"
PROJECT_PATH = "myteam/myrepo"
FILE_PATH = "docs/readme.md"
BRANCH = "main"

运行后它就会访问：

https://devops.xxx.jp/api/v4/projects/myteam%2Fmyrepo/repository/files/docs%2Freadme.md/raw?ref=main

✅ 这样才能下载到真正的文件

⸻

✅ 下一步怎么做？

1️⃣ 先验证 Token 是否有效

curl --header "PRIVATE-TOKEN: <你的Token>" https://devops.xxx.jp/api/v4/user

2️⃣ 如果能返回 JSON ✅ → 我帮你写好最终下载命令和 Python 代码
3️⃣ 如果返回 HTML ❌ → 说明 Token 权限不足或域名不对，需要修正

⸻

👉 你要不要现在就先跑第 1 步 curl 命令，看能不能返回 JSON？
如果可以，我直接给你完整下载脚本。

要不要我给你一个 只输入 URL+Token 自动完成验证和下载的简易版脚本？



import requests
import urllib.parse

# === 配置区 ===
GITLAB_URL = "https://gitlab.com"   # 如果是自建GitLab，改成自己的域名
ACCESS_TOKEN = "YOUR_TOKEN_HERE"   # 你的GitLab Personal Access Token
PROJECT_PATH = "group/project"     # 项目的命名空间路径，例如 myteam/myrepo
FILE_PATH = "docs/example.md"      # 仓库里的文件路径
BRANCH = "main"                    # 分支名，比如 main / master

def check_token():
    """检查 GitLab Token 是否有效"""
    url = f"{GITLAB_URL}/api/v4/user"
    headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}
    print(f"🔍 正在检查 Token 是否有效...")

    resp = requests.get(url, headers=headers)
    
    if resp.status_code == 200:
        try:
            user_info = resp.json()
            print(f"✅ Token 有效，用户：{user_info.get('username')} (ID {user_info.get('id')})")
            return True
        except Exception as e:
            print(f"⚠️ Token 响应不是有效 JSON，可能是 GitLab HTML 页面")
            print(resp.text[:200])  # 打印前200字符
            return False
    else:
        print(f"❌ Token 无效或无权限，状态码 {resp.status_code}")
        print(resp.text)
        return False

def download_file():
    """用 API 下载文件"""
    encoded_project = urllib.parse.quote(PROJECT_PATH, safe="")
    encoded_file = urllib.parse.quote(FILE_PATH, safe="")
    api_url = f"{GITLAB_URL}/api/v4/projects/{encoded_project}/repository/files/{encoded_file}/raw?ref={BRANCH}"

    headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}
    print(f"🔍 通过 API 下载文件：{FILE_PATH}")
    resp = requests.get(api_url, headers=headers)

    if resp.status_code == 200:
        filename = FILE_PATH.split("/")[-1]
        with open(filename, "wb") as f:
            f.write(resp.content)
        print(f"✅ 文件下载成功：{filename}")
    else:
        print(f"❌ 下载失败，状态码 {resp.status_code}")
        print(resp.text)

if __name__ == "__main__":
    if check_token():
        download_file()
    else:
        print("⚠️ 请检查 Token 是否正确，并确认已勾选 read_repository 权限。")


import requests
import urllib.parse

# === 配置区 ===
GITLAB_URL = "https://gitlab.com"   # 如果是自建GitLab，改成自己的域名
ACCESS_TOKEN = "YOUR_TOKEN_HERE"   # 你的GitLab Personal Access Token
PROJECT_PATH = "group/project"     # 项目的命名空间路径，例如 myteam/myrepo
FILE_PATH = "docs/example.md"      # 仓库里的文件路径
BRANCH = "main"                    # 分支名，比如 main / master

# === Step 1: 检查 Token 是否有效 ===
def check_token():
    url = f"{GITLAB_URL}/api/v4/user"
    headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}
    print(f"🔍 检查 Token 是否有效...")
    resp = requests.get(url, headers=headers)
    if resp.status_code == 200:
        user_info = resp.json()
        print(f"✅ Token 有效，用户：{user_info['username']} (ID {user_info['id']})")
        return True
    else:
        print(f"❌ Token 无效或无权限，状态码 {resp.status_code}")
        print(resp.text)
        return False

# === Step 2: 用 API 下载文件 ===
def download_file():
    # GitLab API 下载地址需要 URL Encode
    encoded_project = urllib.parse.quote(PROJECT_PATH, safe="")
    encoded_file = urllib.parse.quote(FILE_PATH, safe="")
    api_url = f"{GITLAB_URL}/api/v4/projects/{encoded_project}/repository/files/{encoded_file}/raw?ref={BRANCH}"

    headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}
    print(f"🔍 通过 API 下载文件：{FILE_PATH}")
    resp = requests.get(api_url, headers=headers)

    if resp.status_code == 200:
        filename = FILE_PATH.split("/")[-1]
        with open(filename, "wb") as f:
            f.write(resp.content)
        print(f"✅ 文件下载成功：{filename}")
    else:
        print(f"❌ 下载失败，状态码 {resp.status_code}")
        print(resp.text)

if __name__ == "__main__":
    if check_token():
        download_file()
    else:
        print("⚠️ 请检查 Token 是否正确，并确认已勾选 read_repository 权限。")

明白了！你已经在浏览器点了 “Raw” 按钮 → 右键复制链接 → 用 curl 下载，但结果还是 HTML（提示重定向或登录），说明：

✅ 这个文件在一个私有项目里
✅ GitLab即使是Raw链接，也需要你先认证
✅ 你的 PRIVATE-TOKEN 目前没被正确识别或权限不够

⸻

✅ 为什么会这样？

GitLab 对私有库的保护是：
	•	浏览器里你已经登录，所以能直接看到 Raw
	•	但 curl 不是登录状态，需要带 正确的 Token
	•	如果 Token 无效 / 权限不够，就会返回一个登录页面 (HTML + sign_in)

⸻

✅ 正确下载私有文件的方法

对私有库，建议直接用 GitLab API，而不是普通 Raw 链接。

1️⃣ API 下载链接格式

https://gitlab.com/api/v4/projects/<URL_ENCODED_PROJECT_PATH>/repository/files/<URL_ENCODED_FILE_PATH>/raw?ref=<BRANCH>

示例：

https://gitlab.com/api/v4/projects/mygroup%2Fmyrepo/repository/files/docs%2Fexample.md/raw?ref=main

然后：

curl --header "PRIVATE-TOKEN: <your_token>" -O "https://gitlab.com/api/v4/projects/mygroup%2Fmyrepo/repository/files/docs%2Fexample.md/raw?ref=main"

✅ 这样 100% 会得到真正的 Markdown 文件。

⸻

2️⃣ 但你目前只有 Raw 按钮的 URL

那我们可以先用同一个 Token 测试权限是否有效：

curl --header "PRIVATE-TOKEN: <your_token>" -I "https://gitlab.com"

如果返回 HTTP/2 200 → 说明 Token 有效
如果返回 401 Unauthorized → Token 无效或者没权限

⸻

✅ 你的情况很可能是：
	•	Token 还没正确填入（可能还是 YOUR_TOKEN 文字没换）
	•	Token 权限不够（需要 read_repository）
	•	Token 对应的是错误账号（没权限访问私有项目）
	•	GitLab 是自建的，必须用完整域名匹配

⸻

✅ 你现在可以这样排查
	1.	确认 Token 正确并能用

curl --header "PRIVATE-TOKEN: <your_token>" "https://gitlab.com/api/v4/user"

✅ 如果正常，应该返回你的用户信息（JSON 格式）
❌ 如果报 401 → Token 有问题
	2.	确认 Token 有 read_repository 权限
	•	GitLab → Settings → Access Tokens → 勾选 read_api & read_repository
	3.	确认链接是否真是 Raw
	•	浏览器点 Raw → 复制链接 → 再打开无痕窗口
	•	如果无痕里打不开，说明它是私有的，必须用 API

⸻

✅ 最终建议

因为是私有项目，最保险的方法就是走 API，而不是 Raw 按钮的链接。
要用 API，我需要知道：
	•	项目的路径（例如 mygroup/myrepo）
	•	文件的路径（例如 docs/example.md）
	•	分支名（例如 main）

我就能帮你拼出正确的 API 下载命令。

⸻

要不要我先给你一个 自动检测 Token + API 下载的脚本，一步帮你搞定？
还是先帮你 测试 Token 是否有效？

👉 要不要先测试 Token？



curl --header "PRIVATE-TOKEN: YOUR_TOKEN" -O "THE_LINK_YOU_GOT"






import requests
import os

# === Configuration ===
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab server URL if it's self-hosted
PROJECT_ID = "12345678"            # Replace with your GitLab project ID
FILE_PATH = "docs/example.md"      # Path to the file inside the repo
REF = "main"                       # Branch name or commit hash
ACCESS_TOKEN = "your_personal_access_token"

# Output file name
OUTPUT_FILE = os.path.basename(FILE_PATH)

# === GitLab API endpoint ===
API_URL = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/files/{requests.utils.quote(FILE_PATH, safe='')}/raw?ref={REF}"

# === Send request ===
headers = {"PRIVATE-TOKEN": ACCESS_TOKEN}
response = requests.get(API_URL, headers=headers)

if response.status_code == 200:
    with open(OUTPUT_FILE, "wb") as f:
        f.write(response.content)
    print(f"✅ File downloaded successfully: {OUTPUT_FILE}")
else:
    print(f"❌ Failed to download file. Status: {response.status_code}")
    print(response.text)








import psycopg2

# 接続情報（自分の環境に合わせて修正）
host = "localhost"
port = 5432
dbname = "your_database"
user = "your_username"
password = "your_password"
schema_name = "public"
table_name = "postal_grade_data"

try:
    # PostgreSQL に接続
    conn = psycopg2.connect(
        host=host,
        port=port,
        dbname=dbname,
        user=user,
        password=password
    )
    cursor = conn.cursor()

    # 1. 行数（レコード数）を取得
    count_sql = f"SELECT COUNT(*) FROM {schema_name}.{table_name};"
    cursor.execute(count_sql)
    row_count = cursor.fetchone()[0]
    print(f"レコード件数：{row_count} 件")

    # 2. テーブルサイズを取得（人間が読める形式）
    size_sql = f"""
        SELECT
            pg_size_pretty(pg_total_relation_size('{schema_name}.{table_name}')) AS total_size,
            pg_size_pretty(pg_relation_size('{schema_name}.{table_name}')) AS table_size,
            pg_size_pretty(pg_indexes_size('{schema_name}.{table_name}')) AS index_size;
    """
    cursor.execute(size_sql)
    size_result = cursor.fetchone()

    print(f"合計サイズ      ：{size_result[0]}")
    print(f"テーブル本体    ：{size_result[1]}")
    print(f"インデックス部分：{size_result[2]}")

except Exception as e:
    print("エラーが発生しました：", e)

finally:
    if 'conn' in locals() and conn:
        cursor.close()
        conn.close()
        print("データベース接続を終了しました。")



import pandas as pd
import psycopg2

conn = psycopg2.connect(
    dbname="你的数据库名",
    user="你的用户名",
    password="你的密码",
    host="你的数据库地址",
    port="5432"
)

df = pd.read_sql("SELECT * FROM coooo.aaatable;", conn)
print(df.head())

conn.close()





import psycopg2

# 替换为你的数据库信息
conn = psycopg2.connect(
    dbname="你的数据库名",
    user="你的用户名",
    password="你的密码",
    host="你的数据库地址",  # 如果是本机可以写 localhost
    port="5432"  # PostgreSQL 默认端口
)

# 创建游标
cur = conn.cursor()

# 执行 SQL 查询
cur.execute("SELECT * FROM your_table_name;")

# 获取所有结果
rows = cur.fetchall()

# 打印结果
for row in rows:
    print(row)

# 关闭连接
cur.close()
conn.close()







import pandas as pd
from boxsdk import JWTAuth, Client
import io

# Step 1: 你的 DataFrame
df = pd.DataFrame({
    'Name': ['Alice', 'Bob'],
    'Age': [25, 30]
})

# Step 2: 认证 Box API（用 JWT 配置）
auth = JWTAuth.from_settings_file('your_jwt_config.json')
client = Client(auth)

# Step 3: 创建 Excel 文件到内存中
excel_buffer = io.BytesIO()
df.to_excel(excel_buffer, index=False, engine='openpyxl')
excel_buffer.seek(0)

# Step 4: 选择 Box 中的目标文件夹（如根目录）
folder_id = '0'  # 根目录；你也可以用其他具体文件夹的 ID

# Step 5: 上传为文件
file_name = 'output.xlsx'
uploaded_file = client.folder(folder_id).upload_stream(excel_buffer, file_name)

print(f"文件已上传到 Box：{uploaded_file.name} (ID: {uploaded_file.id})")





import subprocess
import base64

# Tableau Server 信息
TABLEAU_SERVER = "https://your-tableau-server.com"
USERNAME = "your_username"
PASSWORD = "your_password"
VIEW_URL = "views/your_dashboard"  # 你的仪表板视图路径
OUTPUT_FILE = "dashboard.png"

# 使用 tabcmd 登录 Tableau Server
login_command = [
    "tabcmd", "login",
    "--server", TABLEAU_SERVER,
    "--username", USERNAME,
    "--password", PASSWORD
]

# 运行登录命令
subprocess.run(login_command, check=True)

# 使用 tabcmd 获取仪表板的图片
get_image_command = [
    "tabcmd", "get",
    f"{TABLEAU_SERVER}/{VIEW_URL}.png",
    "-o", OUTPUT_FILE
]

# 运行下载命令
subprocess.run(get_image_command, check=True)

# 读取图片并转换为 Base64 编码字符串
with open(OUTPUT_FILE, "rb") as img_file:
    image_base64 = base64.b64encode(img_file.read()).decode('utf-8')

print(f"仪表板图片的 Base64 编码字符串为：{image_base64}")

# 使用 tabcmd 退出登录
logout_command = ["tabcmd", "logout"]
subprocess.run(logout_command, check=True)
